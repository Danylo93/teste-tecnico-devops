name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: cd frontend && yarn install

    - name: Run unit tests
      run: cd frontend && yarn test

    - name: Build application
      run: cd frontend && yarn build

    - name: Set timestamp
      run: echo "RELEASE_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

    - name: Archive production artifacts
      run: |
        cd frontend
        zip -r -9 ../build.zip .
      working-directory: ${{ github.workspace }}

    - name: List archives production artifacts
      run: ls -la ./frontend

    - name: Upload archived production artifacts
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: build-artifacts
        path: ./build.zip

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v1.0.${{ github.run_number }}-${{ env.RELEASE_TIMESTAMP }}"
        release_name: "Release v1.0.${{ github.run_number }}-${{ env.RELEASE_TIMESTAMP }}"
        draft: false
        prerelease: false
        body: |
          Release notes for version v1.0.${{ github.run_number }}-${{ env.RELEASE_TIMESTAMP }}
    
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build.zip
        asset_name: build.zip
        asset_content_type: application/zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: test
      url: https://placeholder-test-environment-url.com  # Altere para a URL do seu ambiente

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./frontend

    - name: Display structure of downloaded files
      run: ls -R ./frontend

    - name: List Build Artifacts
      run: ls -la ./frontend

    - name: Deploy to test environment
      run: echo "Deploying to test environment"
      env:
        DEPLOY_ENVIRONMENT: test
  
  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Send notification on failure
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        from: agenciafwdigital@gmail.com
        subject: CI/CD Pipeline Failed
        body: |
          The CI/CD pipeline failed during the ${{ job.status }} job.
        to: agenciafwdigital@gmail.com